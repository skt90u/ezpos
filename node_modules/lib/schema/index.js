var _                = require( 'underscore' ),
	fs               = require( 'fs' ),
    config           = require( 'lib/config' ),
	path             = require( 'path' ),
	mongoose         = require( 'mongoose' ),
	querystringUtils = require( 'querystring' ),
	logger           = require( 'lib/logger' )( 'SCHEMA' );
    //logger           = require( 'lib/logger' )( __dirname + '/' + __filename );

var crudFactory = function( modelName ){

    return {
        
        create: function( querystring, model, callback ){
            model = _.extend( {}, querystringUtils.parse( querystring || '' ), model || {} );
            logger.info( 'create {0}', modelName );
            logger.info( { model: model } );

            var Model = mongoose.model( modelName );
            var document = new Model( model ); 
            document.save( function( err, createdData, count ){
                if( err ){
                	logger.error( err.message );
                }
                else{
                	logger.info( '{0} item(s) has been created', count );
                }
                callback( null, createdData );
            });
        },

        delete: function( id, querystring, callback ){
            var conditions = querystringUtils.parse( querystring || '' );
            if( id ){
                conditions = _.extend( {}, conditions, { _id: mongoose.Types.ObjectId( id ) } );
            }
            logger.info( 'delete {0}', modelName );
            logger.info( { conditions: conditions } );

            var Model = mongoose.model( modelName );
            Model.remove( conditions, function( err, result ){
                if( err ){
                    logger.error( err.message );
                }
                else{
                    logger.info( '{0} item(s) has been deleted', result.result.n ); 
                }
                callback( null, result );
            });
        },

        read: function( querystring, callback ){
            var conditions = querystringUtils.parse( querystring || '' );
            logger.info( 'read {0}', modelName);
            logger.info( { conditions: conditions } );

            var Model = mongoose.model( modelName );
            Model.find( conditions, function( err, result ){
                if( err ){
                    logger.error( err.message );
                }
                else{
                    logger.info( '{0} item(s) has been read', result.length );
                }
                callback( null, result );
            });
        },

        readById: function( id, querystring, callback ){
            // id = '5542d8b5f3abc876a785881b';
            // querystring = 'id=5542d8b5f3abc876a785881b';
            var documentId = id || querystringUtils.parse( querystring || '' )['id'] || '';
            logger.info( 'read {0} by id', modelName );
            logger.info( { id: id, querystring: querystring, documentId: documentId } );

            var Model = mongoose.model( modelName );
            Model.findById( documentId, function( err, result ){
                if( err ){
                    logger.error( err.message );
                }
                else{
                    var count = result ? 1 : 0;
                    logger.info( '{0} item(s) has been read by id', count ); 
                }
                callback( null, result );
            });
        },

        update: function(id, querystring, model, callback){
            var arg1 = ( id && { _id: mongoose.Types.ObjectId( id ) } ) || {};
            var arg2 = querystringUtils.parse( querystring || '' );
            if(arg2.id){
                arg2._id = mongoose.Types.ObjectId( arg2.id );
                delete arg2.id;
            }
            var conditions = _.extend( {}, arg1, arg2 );
            logger.info( 'update {0}', modelName );
            logger.info( { arg1: arg1, arg2: arg2, conditions: conditions } );

            var Model = mongoose.model( modelName );
            Model.update( conditions, { $set: model }, function( err, result ){
                if( err ){
                    logger.error( err.message );
                }
                else{
                    logger.info( '{0} item(s) has been updated', result.nModified ); 
                }
                callback( null, result );
            });
        }
    };
};

var connectDb = function(){

    var options = { server: { socketOptions: {keepAlive: 1} } };

    mongoose.connection.on('error',         logger.error);
    mongoose.connection.on('disconnected',  connectDb);
    mongoose.connection.on('connecting',    function(){logger.info('connecting {0}', config.db );});
    mongoose.connection.on('connected',     function(){logger.info('connected {0}', config.db );});
    mongoose.connection.on('disconnecting', function(){logger.info('disconnecting {0}', config.db );});
    mongoose.connection.on('open',          function(){logger.info('open {0}', config.db );});

    mongoose.connect(config.db, options);
};

var bindCrud = function( app ){

    connectDb();

    require('express-crud')(app);
	
	fs.readdirSync( __dirname ).forEach( function( file ){
		if( file == 'index.js' || path.extname( file ) !== '.js' ) { 
			return; 
		}
		
		var modelName = path.basename( file, '.js' );
		var schema = require( './' + file );
        logger.info( 'register model {0}', modelName );
		mongoose.model( modelName, schema );
		
        logger.info( 'bindCrud {0}', modelName );
		app.crud( modelName, crudFactory( modelName ) );
	});
};

module.exports = bindCrud;
